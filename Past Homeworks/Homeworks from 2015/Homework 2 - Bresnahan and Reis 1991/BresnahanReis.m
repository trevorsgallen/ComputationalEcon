clear

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/tgallen/Dropbox/Numerical Methods/Homework 2/BR.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/09/13 08:53:53

%% Initialize variables.
filename = '/Users/tgallen/Dropbox/Numerical Methods/Homework 2/BR.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
ID = dataArray{:, 1};
TIRE = dataArray{:, 2};
TPOP = dataArray{:, 3};
NGRW = dataArray{:, 4};
PGRW = dataArray{:, 5};
OCTY = dataArray{:, 6};
OPOP = dataArray{:, 7};
LANDV = dataArray{:, 8};
ELD = dataArray{:, 9};
FFRAC = dataArray{:, 10};
PINC = dataArray{:, 11};
LNHDD = dataArray{:, 12};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

X = [ones(length(ELD),1),ELD,PINC,LNHDD,FFRAC];
W = LANDV;

lambdatrue = [-0.53;2.25;0.34;0.23]
betatrue = [-0.49;-0.03;0.004;-0.02];
alphatrue = [0.86;0.03;0.15;0.08;0.08]
gammatrue = [0.53;0.76;0.46;0.60;0.12;-0.74]

alpha = alphatrue
beta = betatrue
gamma = gammatrue
lambda = lambdatrue

V = @(alpha,beta,n) X*[alpha(1);beta]-sum(alpha(2:n))

f = @(beta,gamma,n) gamma(1) + gamma(end).*W + sum(gamma(2:n)); 

V(alphatrue,betatrue,3)
f(betatrue,gammatrue,3)

% S = @(gamma,alpha,beta,n) (gamma(1) + gamma(end).*mean(W) + sum(gamma(2:n)))./(mean(X)*[alpha(1);beta]-sum(alpha(2:n)));
S = @(lambda) TPOP + lambda(1).*OPOP + lambda(2).*NGRW + lambda(3).*PGRW + lambda(4).*OCTY

P_1 = @(beta,alpha,gamma,lambda) log(1-normcdf(S(lambda).*V(alpha(1),beta,1)-f(beta,gamma,1)));
P_2 = @(beta,alpha,gamma,lambda) log(normcdf(S(lambda).*V(alpha,beta,1)-f(beta,[gamma;gamma(end)],1))-normcdf(S(lambda).*V(alpha,beta,2)-f(beta,gamma,2)));
P_3 = @(beta,alpha,gamma,lambda) log(normcdf(S(lambda).*V(alpha,beta,2)-f(beta,[gamma;gamma(end)],2))-normcdf(S(lambda).*V(alpha,beta,3)-f(beta,gamma,3)));
P_4 = @(beta,alpha,gamma,lambda) log(normcdf(S(lambda).*V(alpha,beta,3)-f(beta,[gamma;gamma(end)],3))-normcdf(S(lambda).*V(alpha,beta,4)-f(beta,gamma,4)));
P_5 = @(beta,alpha,gamma,lambda) log(normcdf(S(lambda).*V(alpha,beta,4)-f(beta,[gamma;gamma(end)],4))-normcdf(S(lambda).*V(alpha,beta,5)-f(beta,gamma,5)));
P_6 = @(beta,alpha,gamma,lambda) log(normcdf(S(lambda).*V(alpha,beta,5)-f(beta,[gamma;gamma(end)],5)));


BR(beta,alpha,gamma,lambda,TIRE,P_1,P_2,P_3,P_4,P_5,P_6)
BR_temp = @(x) BR(x(1:4),x(5:9),x(10:15),x(16:19),TIRE,P_1,P_2,P_3,P_4,P_5,P_6)

esthat = fminsearch(BR_temp,zeros(19,1))
esthat = patternsearch(BR_temp,esthat,[],[],[],[],[-Inf(4,1);zeros(5,1);zeros(5,1);-Inf(6,1)],[Inf(19,1)])
esthat = fmincon(BR_temp,esthat,[],[],[],[],[-Inf(4,1);zeros(5,1);zeros(5,1);-Inf(6,1)],[Inf(19,1)])

beta_hat = esthat(1:4);
alpha_hat = esthat(5:9);
gamma_hat = esthat(10:15);
lambda_hat = esthat(16:19);

BR_temp([beta_hat;alpha_hat;gamma_hat;lambda_hat])
BR_temp([betatrue;alphatrue;gammatrue;lambdatrue])

[[beta_hat,betatrue];
    [alpha_hat,alphatrue];
    [gamma_hat,gammatrue];
    [lambda_hat,lambdatrue]]

%Gradient (slow & silly)
    d = 1e-10;
    x0 = esthat;
    for var = 1:19
        x0_alt = x0;
        x0_alt(var) = x0_alt(var)+d;
        grad(var) = (BR_temp(x0_alt)-BR_temp(x0))./d;
    end
    
%Hessian (slow & silly)
    d = 1e-5;
    x0 = esthat;
    for var = 1:19
        for var2 = 1:19
            [var,var2]
            x0_alt_1 = x0;
            x0_alt_2 = x0;
            x0_alt_3 = x0;
            x0_alt_4 = x0;
            x0_alt_1(var) = x0_alt_1(var)+d;
            x0_alt_1(var2) = x0_alt_1(var2)+d;
            x0_alt_2(var) = x0_alt_2(var)+d;
            x0_alt_2(var2) = x0_alt_2(var2)-d;
            x0_alt_3(var) = x0_alt_3(var)-d;
            x0_alt_3(var2) = x0_alt_3(var2)+d;
            x0_alt_4(var) = x0_alt_4(var)-d;
            x0_alt_4(var2) = x0_alt_4(var2)-d;
        hess(var,var2) = (BR_temp(x0_alt_1)-BR_temp(x0_alt_2)-BR_temp(x0_alt_3)+BR_temp(x0_alt_4))./(4.*d.^2);
        end
    end
    
        tab = cell(19,3)
        tab{1,1} = 'beta_1'
        tab{2,1} = 'beta_2'
        tab{3,1} = 'beta_3'
        tab{4,1} = 'beta_4'
        tab{5,1} = 'alpha_1'
        tab{6,1} = 'alpha_2'
        tab{7,1} = 'alpha_3'
        tab{8,1} = 'alpha_4'
        tab{9,1} = 'alpha_5'
        tab{10,1} = 'gamma_1'
        tab{11,1} = 'gamma_2'
        tab{12,1} = 'gamma_3'
        tab{13,1} = 'gamma_4'
        tab{14,1} = 'gamma_5'
        tab{15,1} = 'gamma_6'
        tab{16,1} = 'lambda_1'
        tab{17,1} = 'lambda_2'
        tab{18,1} = 'lambda_3'
        tab{19,1} = 'lambda_4'

        temp1 = [beta_hat;alpha_hat;gamma_hat;lambda_hat];
        temp2 = sqrt(diag(inv(hess)));
        for ind = 1:19
            tab{ind,2} = temp1(ind);
            tab{ind,3} = temp2(ind);
        end
        
    V_temp = @(alpha,beta,n) mean(X)*[alpha(1);beta]-sum(alpha(2:n))
    f_temp = @(beta,gamma,n) gamma(1) + gamma(end).*mean(W) + sum(gamma(2:n)); 

        for i = 1:5
            S_cutoff(i) = f_temp(beta_hat,gamma_hat,i)./V_temp(alpha_hat,beta_hat,i)./i;
        end
        (S_cutoff(5).*[1:5])./(S_cutoff.*5)